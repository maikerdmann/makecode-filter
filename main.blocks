<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="fOu7A:0%=c(W-M^DqWxT" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="s]FA}AWfltf~WBip3%c,"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Ultraschall_advanced {" line1="    let ultraschall_obj: Ultraschallsensor" line2="" line3="" line4="    /**" line5="     * Abstand" line6="     */" line7="    //% blockId=abstand" line8="    //% block=&quot;Abstand&quot;" line9="    export function abstand(): number {" line10="        return Math.round(ultraschall_obj.filter.current)" line11="    }" line12="" line13="    /**" line14="     * stop Advanced" line15="     */" line16="    //% blockId=stopAdvanced" line17="    //% block=&quot;stop_ultraschall_advanced&quot;" line18="    export function stop_advanced(): void {" line19="        ultraschall_obj.active = false" line20="    }" line21="" line22="    /**" line23="     * Start Ultraschall advanced" line24="     */" line25="    //% blockId=initAdvanced" line26="    //% block=&quot;init_utraschall_advanced&quot;" line27="    export function init_advanced(): void {" line28="        ultraschall_obj = new Ultraschallsensor(0.64375)" line29="    }" line30="" line31="    class Ultraschallsensor {" line32="        active: boolean;" line33="" line34="        trig: DigitalPin;" line35="        echo: DigitalPin;" line36="" line37="        low_bound: number;" line38="        high_bound: number;" line39="        cal_factor: number;" line40="" line41="        filter: MM;" line42="" line43="        current: number;" line44="" line45="        constructor(" line46="            factor?: number," line47="            trig: DigitalPin = DigitalPin.P8, " line48="            echo: DigitalPin = DigitalPin.P9," line49="            low_bound: number = 2," line50="            high_bound: number = 400" line51="            ){" line52="            this.active = true" line53="            this.trig = trig" line54="            this.echo = echo" line55="            this.low_bound = low_bound" line56="            this.high_bound = high_bound" line57="            this.cal_factor = factor" line58="            this.filter = new MM(5)" line59="" line60="            control.runInBackground(function () {" line61="                while (this.active) {" line62="                    this.update()" line63="                    basic.pause(50)" line64="                }" line65="            })" line66="        }" line67="" line68="        measure(): number {" line69="            pins.setPull(this.trig, PinPullMode.PullNone);" line70="            pins.digitalWritePin(this.trig, 0);" line71="            control.waitMicros(2);" line72="            pins.digitalWritePin(this.trig, 1);" line73="            control.waitMicros(10);" line74="            pins.digitalWritePin(this.trig, 0);" line75="" line76="            // read pulse" line77="            const d = pins.pulseIn(this.echo, PulseValue.High, 400 * 58);" line78="" line79="            //time divided by 2 times the sonicspeed" line80="            return d / 2 * 0.03432" line81="        }" line82="" line83="        is_valid(measurement: number): boolean {" line84="            if (measurement &gt;= this.low_bound &amp;&amp; measurement &lt;= this.high_bound) {" line85="                return true" line86="            }" line87="            return false" line88="        }" line89="" line90="        update() {" line91="            let messung = this.measure()" line92="            if (this.cal_factor) {" line93="                messung = messung / this.cal_factor" line94="            }" line95="            " line96="            if (this.is_valid(messung)) {" line97="                this.filter.update(messung)" line98="            }" line99="        }" line100="" line101="    }" line102="" line103="    class MM {" line104="        current: number" line105="        window: number[]" line106="        windowsize: number" line107="" line108="        constructor(windowsize: number) {" line109="            this.windowsize = windowsize" line110="            this.window = []" line111="        }" line112="" line113="        add_measurement(measurement: number) {" line114="            this.window.push(measurement)" line115="            if (this.window.length &gt; this.windowsize) { this.window.shift() }" line116="        }" line117="" line118="        update(measurement: number): number {" line119="            this.add_measurement(measurement)" line120="            if (this.window.length &lt; this.windowsize) { return measurement }" line121="" line122="            this.current = this.calculate()" line123="            return this.current" line124="        }" line125="" line126="        calculate(): number {" line127="            const temp: number[] = [];" line128="            this.window.forEach((item) =&gt; {" line129="                temp.push(item)" line130="            })" line131="            temp.sort((a, b) =&gt; a - b);" line132="            if (temp.length % 2 === 0) {" line133="                return (temp[temp.length / 2 - 1] + temp[temp.length / 2]) / 2" line134="            } else if (temp.length === 1) {" line135="                return temp[0];" line136="            } else {" line137="                return temp[Math.floor(temp.length / 2)];" line138="            }" line139="        }" line140="" line141="    }" line142="}" numlines="143"></mutation></block></statement></block></xml>